#ifndef ACTOR_H_
#define ACTOR_H_

#include "GraphObject.h"
#include "StudentWorld.h"
#include "GameConstants.h"

class StudentWorld;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Actor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Actor: public GraphObject
{
public:
    Actor(StudentWorld* world, int imageID, int startX, int startY, Direction direction, double size = 1.0, unsigned int depth = 0, bool isDisplayed = true);
    ~Actor();
    
    virtual void doSomething() = 0;
    bool isAlive();
    void setDead();
    virtual void annoy(int damage);
    virtual bool canBeAnnoyed() const;
    
    StudentWorld* getWorld();
    void moveInDirection(Direction direction);
    
private:
    bool m_isAlive;
    StudentWorld* m_world;
};


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// People
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class People : public Actor
{
public:
    People(StudentWorld* world, int imageID, int startX, int startY, Direction direction, int maxHitPoint);
    bool canBeAnnoyed() const;
    int getHitPoint();
    void takeDamage(int damage);
    
private:
    int m_hitPoint; //Keeps track of how much health TunnelMan and protester objects have
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// TunnelMan
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class TunnelMan: public People
{
public:
    TunnelMan(StudentWorld* world); // TunnelMan(StudentWorld* world);
    ~TunnelMan();
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // get functions
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    
    int getSquirt();
    int getSonar();
    int getGold();
    
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Game Logic functions
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    
    void increaseSquirt();
    void increaseSonar();
    void increaseGold();
    
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // TunnelMan's action functions
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    
    void doSomething() override;
    void annoy(int damage) override;
    void shoot();
    
private:
    int m_hitPoint = 10;
    int m_squirt = 5;
    int m_sonar = 1;
    int m_gold = 0;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Earth
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Earth: public Actor
{
public:
    Earth(int startX, int startY);
    virtual void doSomething();
};


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Protestors
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Protestor: public Actor
{
public:
    Protestor(StudentWorld* world);
    virtual void doSomething();
    virtual void getBribed();
    virtual void isAnnoyed();

private:
    
};

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//// Goodies // includes oil, gold, water
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//// goodies need tick life, tick passed
//class Goodie: public Actor
//{
//public:
//    Goodie(StudentWorld* world, int imageID, int startX, int startY, bool isDisplayed);
//    bool isPickedUp();
//    virtual void doSomething();
//};
//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//// Gold
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//class Gold: public Goodie
//{
//public:
//    Gold(StudentWorld* world, int startX, int startY, bool visible, bool dropped);
//    virtual void doSomething();
//
//private:
//    bool isDropped;
//};
//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//// Oil Barrel
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//class OilBarrel: public Goodie
//{
//public:
//    OilBarrel(StudentWorld* world, int startX, int startY);
//    void doSomething() override;
//};
//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//// Sonar
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//class Sonar: public Goodie
//{
//public:
//    Sonar(StudentWorld* world, int startX, int startY);
//    void doSomething() override;
//};
//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//// Waterpool
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//class WaterPool: public Goodie {
//public:
//    WaterPool(StudentWorld* world, int startX, int startY);
//    void doSomething() override;
//};


#endif // ACTOR_H_

